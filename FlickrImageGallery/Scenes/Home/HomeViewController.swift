//
//  HomeViewController.swift
//  FlickrImageGallery
//
//  Created by Gabriel Targon on 29/11/20.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol HomeDisplayLogic: class {
    func displayImages(viewModel: Home.ImagesArray.ViewModel)
    func displayServiceErrorAlert()
}

class HomeViewController: UIViewController, HomeDisplayLogic {
    var interactor: HomeBusinessLogic?
    var router: (NSObjectProtocol & HomeRoutingLogic & HomeDataPassing)?
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setupHome()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setupHome()
    }
    
    // MARK: Setup
    
    private func setupHome() {
        let viewController = self
        let presenter = HomePresenter()
        let router = HomeRouter()
        let worker = HomeWorker()
        let interactor = HomeInteractor(presenter: presenter, worker: worker)
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: Routing
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: View lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        initialSetup()
    }
    
    // MARK: Home Functions
    
    @IBOutlet weak var collectionView: UICollectionView!
    let cellIdentifier = "photoCell"
    let numberOfLoadingCells = 10
    let spacingBetweenItems:CGFloat = 5
    var cellData = [FlickrImage]()
    
    func initialSetup() {
        collectionViewSetup()
        
        interactor?.loadImagesArray(request: Home.ImagesArray.Request())
    }
    
    func collectionViewSetup() {
        let flowLayout = collectionView.collectionViewLayout as! UICollectionViewFlowLayout
        flowLayout.estimatedItemSize = .zero
        collectionView.delegate = self
        collectionView.dataSource = self
        collectionView.register(HomePhotoCollectionViewCell.self, forCellWithReuseIdentifier: cellIdentifier)
    }
    
    // MARK: HomeDisplayLogic
    
    func displayImages(viewModel: Home.ImagesArray.ViewModel) {
        cellData = viewModel.images
        DispatchQueue.main.async {
            self.collectionView.reloadData()
        }
    }
    
    func displayServiceErrorAlert() {
        let alert = UIAlertController(title: "Service Error", message: "Something went wrong. Would you like to try again?", preferredStyle: .alert)
        alert.addAction(UIAlertAction(title: "Retry", style: .default, handler: { _ in
            self.interactor?.loadImagesArray(request: Home.ImagesArray.Request())
        }))
        alert.addAction(UIAlertAction(title: "Cancel", style: .default, handler: nil))
        
        self.present(alert, animated: true, completion: nil)
    }
}

extension HomeViewController: UICollectionViewDelegate {
//    func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
//
//        selectedToDelete = selectedToDeleteFromIndexPath(collectionView.indexPathsForSelectedItems!)
//        let cell = collectionView.cellForItem(at: indexPath)
//
//        DispatchQueue.main.async {
//
//            cell?.contentView.alpha = 0.5
//        }
//
//    }
//
//    func collectionView(_ collectionView: UICollectionView, didDeselectItemAt indexPath: IndexPath) {
//
//        selectedToDelete = selectedToDeleteFromIndexPath(collectionView.indexPathsForSelectedItems!)
//        let cell = collectionView.cellForItem(at: indexPath)
//
//        DispatchQueue.main.async {
//
//            cell?.contentView.alpha = 1
//
//        }
//
//    }
}

extension HomeViewController: UICollectionViewDataSource {
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return cellData.count == 0 ? numberOfLoadingCells : cellData.count
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueReusableCell(withReuseIdentifier: cellIdentifier, for: indexPath) as! HomePhotoCollectionViewCell
        
        if cellData.count == 0 {
            return cell
        } else {
            let imageURL = cellData[indexPath.row].imageURLString()
            interactor?.loadImage(request: Home.Image.Request(imageURL: imageURL), completion: { (image) in
                DispatchQueue.main.async {
                    cell.activityIndicator.stopAnimating()
                    cell.imageView.image = image
                }
            })
            return cell
        }
    }
}

extension HomeViewController: UICollectionViewDelegateFlowLayout {
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        
        let width = UIScreen.main.bounds.width / 2 - spacingBetweenItems
        let height = width
        return CGSize(width: width, height: height)
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        
        return spacingBetweenItems
    }
    
    
}
