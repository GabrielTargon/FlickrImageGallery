//
//  HomeInteractorTests.swift
//  FlickrImageGallery
//
//  Created by Gabriel Targon on 03/12/20.
//  Copyright (c) 2020 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import FlickrImageGallery
import XCTest

class HomeInteractorTests: XCTestCase {
    // MARK: Subject under test
    
    var sut: HomeInteractor!
    var presenterSpy: HomePresenterSpy!
    var workerSpy: HomeWorkerSpy!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        presenterSpy = HomePresenterSpy()
        workerSpy = HomeWorkerSpy()
        sut = HomeInteractor(presenter: presenterSpy, worker: workerSpy)
    }
    
    override func tearDown() {
        presenterSpy = nil
        workerSpy = nil
        sut = nil
        super.tearDown()
    }
    
    // MARK: Tests
    
    func testLoadImagesArraySuccess() {
        let request = Home.ImagesArray.Request()
        sut.loadImagesArray(request: request)
        XCTAssertTrue(presenterSpy.presentImagesArrayCalled)
        XCTAssertTrue(workerSpy.getFlickrImagesCalled)
    }
    
    func testLoadImagesArrayFailure() {
        workerSpy.resultType = .failure
        let request = Home.ImagesArray.Request()
        sut.loadImagesArray(request: request)
        XCTAssertFalse(presenterSpy.presentImagesArrayCalled)
        XCTAssertFalse(workerSpy.getFlickrImagesCalled)
    }
    
    func testLoadImageSuccess() {
        let request = Home.Image.Request(imageURL: HomeSeeds.imageURL)
        sut.loadImage(request: request) { (response) in
            XCTAssertNotNil(response)
        }
        XCTAssertTrue(workerSpy.getImageCalled)
    }
    
    func testLoadImageFailure() {
        workerSpy.resultType = .failure
        let request = Home.Image.Request(imageURL: HomeSeeds.imageURL)
        sut.loadImage(request: request) { (response) in
            XCTAssertNotNil(response)
        }
        XCTAssertFalse(workerSpy.getImageCalled)
    }
    
}
